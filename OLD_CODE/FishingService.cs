using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

public class FishingService : MonoBehaviour, IFishingService
{
    private IPlayerRepository playerRepository;
    private IFishRepository fishRepository;
    private FishingSession currentSession;
    private Player currentPlayer;
    
    // –ü–æ—Ç–æ—á–Ω–∞ –∫–æ—Ä—É—Ç—ñ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø–∞–≤–Ω–æ–º —Ä–∏–±–∏
    private Coroutine fishSpawnCoroutine;
    private Coroutine biteCoroutine;

    private bool hasLoggedFightResult = false;
    private float lastFightLogTime = 0f;
    
    void Awake()
    {
        playerRepository = new PlayerRepository("");
        fishRepository = new FishRepository("");
        
    }
    
    public void StartFishing(Player player)
    {
        currentPlayer = player;
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if (currentSession == null)
        {
            currentSession = new FishingSession();
            currentSession.OnFishingComplete += OnFishingComplete;
            currentSession.OnStateChanged += OnStateChanged;
        }
        
        currentSession.StartSession();
        Debug.Log("–†–∏–±–æ–ª–æ–≤–ª—è –ø–æ—á–∞–ª–∞—Å—è!");
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ª–æ–≥—ñ–∫—É –ø–æ—è–≤–∏ —Ä–∏–±–∏
        StartFishSpawnLogic();
    }
    
    public void StopFishing()
    {
        StopAllCoroutines();
        fishSpawnCoroutine = null;
        biteCoroutine = null;
        
        currentSession?.EndSession();
        Debug.Log("–†–∏–±–æ–ª–æ–≤–ª—è –∑—É–ø–∏–Ω–µ–Ω–∞");
    }
    
    private void DetermineEscapeReason()
    {
        var fish = currentSession.CurrentFish;
        var equipment = currentPlayer.Equipment;
        
        string escapeReason = "";
        FishingResult result = FishingResult.FishEscaped;
        
        if (currentPlayer.Strength < fish.Strength * 0.5f)
        {
            escapeReason = "üí™ –†–∏–±–∞ –≤–∏—Ä–≤–∞–ª–∞ –≤—É–¥–∫—É –∑ —Ä—É–∫! (–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–∏–ª–∏)";
            result = FishingResult.RodPulledAway;
        }
        else if (equipment.LineDurability < fish.Strength * 0.3f)
        {
            escapeReason = "üíî –ü–æ—Ä–≤–∞–ª–∞—Å—å –ª–µ—Å–∫–∞! (–ù–∏–∑—å–∫–∞ –º—ñ—Ü–Ω—ñ—Å—Ç—å –ª–µ—Å–∫–∏)";
            equipment.DamageLine(equipment.LineDurability);
            result = FishingResult.LineBroken;
        }
        else if (equipment.RodDurability < fish.Strength * 0.2f)
        {
            escapeReason = "üí• –ó–ª–∞–º–∞–ª–∞—Å—å –≤—É–¥–∫–∞! (–ù–∏–∑—å–∫–∞ –º—ñ—Ü–Ω—ñ—Å—Ç—å –≤—É–¥–∫–∏)";
            equipment.DamageRod(equipment.RodDurability);
            result = FishingResult.RodBroken;
        }
        else
        {
            escapeReason = "üèÉ –†–∏–±–∞ –≤—Ç–µ–∫–ª–∞ —á–µ—Ä–µ–∑ –≤–ª–∞—Å–Ω—É —Å–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å...";
            result = FishingResult.FishEscaped;
        }
        
        Debug.Log($"‚ùå {escapeReason}");
        Debug.Log($"üìä –†–∏–±–∞: {fish.FishType} ({fish.Weight:F1}–∫–≥, —Å–∏–ª–∞: {fish.Strength:F1}) vs –ì—Ä–∞–≤–µ—Ü—å (—Å–∏–ª–∞: {currentPlayer.Strength:F1})");
        
        currentSession.CompleteFishing(result);
    }
    
    
    
    private IEnumerator ExecuteBiteCoroutine(IBiteBehavior biteBehavior)
    {
        Debug.Log($"‚è±Ô∏è {currentSession.CurrentFish.FishType} –∫–ª—é—î {biteBehavior.BiteDuration:F1} —Å–µ–∫—É–Ω–¥!");
        
        biteBehavior.ExecuteBite(
            () => { /* –ü–æ—á–∞—Ç–æ–∫ –∫–ª—é–≤–∞–Ω–Ω—è */ },
            () => { /* –ö—ñ–Ω–µ—Ü—å –∫–ª—é–≤–∞–Ω–Ω—è */ }
        );
        
        yield return new WaitForSeconds(biteBehavior.BiteDuration);
        
        if (currentSession.State == FishingState.Biting)
        {
            Debug.Log("‚è∞ –ß–∞—Å –∫–ª—é–≤–∞–Ω–Ω—è –≤–∏–π—à–æ–≤ - –≥—Ä–∞–≤–µ—Ü—å –Ω–µ –≤—Å—Ç–∏–≥ –ø—ñ–¥—Å—ñ–∫—Ç–∏!");
            CheckForRebite(biteBehavior);
        }
        
        biteCoroutine = null;
    }
    
    private IEnumerator DelayNextFish(float delay)
    {
        yield return new WaitForSeconds(delay);
        
        if (currentSession?.State == FishingState.Waiting)
        {
            StartFishSpawnLogic();
        }
        
        fishSpawnCoroutine = null;
    }
    
    private void OnFishingComplete(FishingResult result, Fish fish)
    {
        Debug.Log($"–†–∏–±–æ–ª–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}");
        
        switch (result)
        {
            case FishingResult.Success:
                HandleSuccessfulCatch(fish);
                break;
            case FishingResult.FishEscaped:
            case FishingResult.LineBroken:
            case FishingResult.RodBroken:
            case FishingResult.RodPulledAway:
                HandleFailedCatch(result, fish);
                break;
        }
        
        // –û—á–∏—â—É—î–º–æ —Å–µ—Å—ñ—é –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∏–¥–∞–Ω–Ω—è
        StartCoroutine(ResetSessionAfterDelay(3f));
    }
    
    private IEnumerator ResetSessionAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);
        
        if (currentSession != null)
        {
            currentSession.ResetToWaiting();
        }
        
        // Debug.Log("–ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∏–¥–∞–Ω–Ω—è!");
    }
    
    private void HandleSuccessfulCatch(Fish fish)
    {
        var caughtFish = new CaughtFishData
        {
            PlayerId = currentPlayer.Id,
            FishType = fish.FishType,
            Weight = fish.Weight,
            CaughtAt = System.DateTime.Now
        };
        
        fishRepository.SaveCaughtFish(caughtFish);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è
        float strengthGain = fish.Weight * 0.1f;
        int expGain = Mathf.RoundToInt(fish.Weight * 15);
        
        currentPlayer.GainStrength(strengthGain);
        currentPlayer.GainExperience(expGain);
        
        playerRepository.UpdatePlayerStats(currentPlayer.Id, strengthGain, expGain);
        
        Debug.Log($"üèÜ –£–°–ü–Ü–•! –ü—ñ–π–º–∞–Ω–æ {fish.FishType} –≤–∞–≥–æ—é {fish.Weight:F2}–∫–≥!");
        Debug.Log($"üìà –ù–∞–≥–æ—Ä–æ–¥–∏: +{strengthGain:F1} —Å–∏–ª–∏, +{expGain} –¥–æ—Å–≤—ñ–¥—É");
        
        // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ—é
        hasLoggedFightResult = false;
    }
    
    private void HandleFailedCatch(FishingResult result, Fish fish)
    {
        string message = result switch
        {
                        FishingResult.FishEscaped => "üèÉ –†–∏–±–∞ –≤—Ç–µ–∫–ª–∞",
            FishingResult.LineBroken => "üíî –ü–æ—Ä–≤–∞–ª–∞—Å—å –ª–µ—Å–∫–∞",
            FishingResult.RodBroken => "üí• –ó–ª–∞–º–∞–ª–∞—Å—å –≤—É–¥–∫–∞", 
            FishingResult.RodPulledAway => "üí™ –†–∏–±–∞ –≤–∏—Ä–≤–∞–ª–∞ –≤—É–¥–∫—É",
            FishingResult.MissedBite => "‚è∞ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–∫–ª—é–≤–∫–∞",
            FishingResult.EmptyReel => "üé£ –í–∏—Ç—è–≥–Ω—É–ª–∏ –ø–æ—Ä–æ–∂–Ω—é –ª—ñ–Ω—ñ—é",
            _ => "‚ùå –ù–µ–≤–¥–∞—á–∞"
        };
        
        if (fish != null)
        {
            Debug.Log($"{message} - {fish.FishType} ({fish.Weight:F2}–∫–≥, —Å–∏–ª–∞: {fish.Strength:F1})");
        }
        else
        {
            Debug.Log(message);
        }
        
        // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ—é
        hasLoggedFightResult = false;
    }
    
    public FishingSession GetCurrentSession()
    {
        return currentSession;
    }
    
    void Update()
    {
        currentSession?.Update(Time.deltaTime);
    }
}