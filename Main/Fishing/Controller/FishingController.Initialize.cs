using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public partial class FishingController 
{
    private void InitializeCachedDelays()
    {
        ShortDelay = new WaitForSeconds(0.1f);
        MediumDelay = new WaitForSeconds(2f);
    }
    
    private void InitializeComponents()
    {
        fishingLogic = new FishingLogic(this);
        floatAnimation = new FloatAnimation(this);
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ SessionManager
        // sessionManager = new SessionManager();
            if (sessionManager == null)
    {
        sessionManager = GetComponent<SessionManager>();
        if (sessionManager == null)
        {
            Debug.LogWarning("‚ö†Ô∏è SessionManager –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –Ω–∞ –æ–±'—î–∫—Ç—ñ! –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π...");
            sessionManager = gameObject.AddComponent<SessionManager>();
        }
    }
        IsReeling = false;
        
        CreatePlayer();
    }
    
    private void InitializeServices()
    {
        var serviceObject = FindOrCreateServiceObject();
        fishingService = GetOrAddFishingService(serviceObject);
        
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—ñ–≤
        if (fishingService != null && sessionManager != null)
    {
        fishingService.SetSessionManager(sessionManager);
        Debug.Log("‚úÖ SessionManager –ø–µ—Ä–µ–¥–∞–Ω–∏–π –¥–æ FishingService");
    }
    else
    {
        Debug.LogError($"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: FishingService={fishingService != null}, SessionManager={sessionManager != null}");
    }
    
    Debug.Log("‚úÖ –°–µ—Ä–≤—ñ—Å–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        SubscribeToServiceEvents();
    }
    
    private void SubscribeToServiceEvents()
    {
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó FishingEventBus
        FishingEventBus.Instance.OnFishSpawned += HandleFishSpawned;
    }

        private void SetupInitialState()
    {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –ø–æ–ø–ª–∞–≤–∫–∞
        if (floatAnimation != null)
        {
            floatAnimation.SetupFloatStartPosition();
        }

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ UI –∫–Ω–æ–ø–∫–∏ - –¶–ï –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û!
        // SetupUIButtons();
        
        CurrentState = FishingState.Ready;
        
        Debug.Log("‚úÖ FishingController —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é");
    }

    // private void SetupUIButtons()
    // {
    //     // –ó–ú–Ü–ù–ï–ù–û: –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∏–¥—É
    //     // –ó–∞–∫–∏–¥–∞–Ω–Ω—è —Ç–µ–ø–µ—Ä –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø–æ –∫–ª—ñ–∫—É –º–∏—à—ñ —á–µ—Ä–µ–∑ WaterClickHandler
        
    //     if (hookPullButton != null)
    //     {
    //         hookPullButton.onClick.RemoveAllListeners();
    //         hookPullButton.onClick.AddListener(HookingFish);
    //     }

    //     if (releaseButton != null)
    //     {
    //         releaseButton.onClick.RemoveAllListeners();
    //         releaseButton.onClick.AddListener(PullingLine);
    //     }
        
    //     Debug.Log("üéØ UI –∫–Ω–æ–ø–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∏–¥—É)");
    // }
    
    private void HandleFishSpawned(Fish fish)
    {
        Debug.Log($"üêü –†–∏–±–∞ {fish.FishType} –∑'—è–≤–∏–ª–∞—Å—è!");
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –Ω–µ–≤–µ–ª–∏–∫–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É
        // StopCoroutine(fishingAnimator.BaseBobbing());
        StartCoroutine(DelayedBite(fish));
    }
    
    private IEnumerator DelayedBite(Fish fish)
    {
        // –ß–µ–∫–∞—î–º–æ 2-5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –∫–ª—é–≤–∞–Ω–Ω—è
        float delay = UnityEngine.Random.Range(2f, 5f);
        yield return new WaitForSeconds(delay);
        
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å–µ —â–µ –º–æ–∂–Ω–∞ –∫–ª—é–≤–∞—Ç–∏
        if (IsFloatCast)
        {
            Debug.Log($"üé£ –†–∏–±–∞ {fish.FishType} –ø–æ—á–∏–Ω–∞—î –∫–ª—é–≤–∞—Ç–∏!");
            // sessionManager.CurrentSession.OnFishBite?.Invoke(fish);
            sessionManager.NotifyFishBite(fish);
        }
    }
    
    private GameObject FindOrCreateServiceObject()
    {
        var serviceObject = GameObject.Find("FishingService");
        return serviceObject ?? new GameObject("FishingService");
    }
    
    private FishingService GetOrAddFishingService(GameObject serviceObject)
    {
        return serviceObject.GetComponent<FishingService>() ?? 
               serviceObject.AddComponent<FishingService>();
    }
    
    // private void SetupInitialState()
    // {
    //     CurrentState = FishingState.Ready;
    // }

    private void CreatePlayer()
    {
        currentPlayer = new Player 
        { 
            Id = 1, 
            Name = "–†–∏–±–∞–ª–∫–∞",
            Strength = 100f,
            Experience = 0,
            Equipment = new Equipment
            {
                RodDurability = 100f,
                LineDurability = 100f,
                LineLength = 100f,
                FishingLuck = 1.2f
            }
        };
    }
    
    void OnDestroy()
    {
        // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –≤—ñ–¥ –ø–æ–¥—ñ–π
        if (FishingEventBus.Instance != null)
        {
            FishingEventBus.Instance.OnFishSpawned -= HandleFishSpawned;
        }
    }
}