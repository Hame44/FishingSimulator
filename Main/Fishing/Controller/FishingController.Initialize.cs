using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public partial class FishingController 
{
    private void InitializeCachedDelays()
    {
        ShortDelay = new WaitForSeconds(0.1f);
        MediumDelay = new WaitForSeconds(2f);
    }
    
    private void InitializeComponents()
    {
        fishingLogic = new FishingLogic(this);
        floatAnimation = new FloatAnimation(this);
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ SessionManager
        sessionManager = new SessionManager();
        
        CreatePlayer();
    }
    
    private void InitializeServices()
    {
        var serviceObject = FindOrCreateServiceObject();
        fishingService = GetOrAddFishingService(serviceObject);
        
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—ñ–≤
        SubscribeToServiceEvents();
    }
    
    private void SubscribeToServiceEvents()
    {
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó FishingEventBus
        FishingEventBus.Instance.OnFishSpawned += HandleFishSpawned;
    }
    
    private void HandleFishSpawned(Fish fish)
    {
        Debug.Log($"üêü –†–∏–±–∞ {fish.FishType} –∑'—è–≤–∏–ª–∞—Å—è!");
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –Ω–µ–≤–µ–ª–∏–∫–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É
        StartCoroutine(DelayedBite(fish));
    }
    
    private IEnumerator DelayedBite(Fish fish)
    {
        // –ß–µ–∫–∞—î–º–æ 2-5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –∫–ª—é–≤–∞–Ω–Ω—è
        float delay = UnityEngine.Random.Range(2f, 5f);
        yield return new WaitForSeconds(delay);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å–µ —â–µ –º–æ–∂–Ω–∞ –∫–ª—é–≤–∞—Ç–∏
        if (IsFloatCast && !IsFishBiting && !IsHooked && sessionManager.CurrentSession != null)
        {
            Debug.Log($"üé£ –†–∏–±–∞ {fish.FishType} –ø–æ—á–∏–Ω–∞—î –∫–ª—é–≤–∞—Ç–∏!");
            // sessionManager.CurrentSession.OnFishBite?.Invoke(fish);
            sessionManager.NotifyFishBite(fish);
        }
    }
    
    private GameObject FindOrCreateServiceObject()
    {
        var serviceObject = GameObject.Find("FishingService");
        return serviceObject ?? new GameObject("FishingService");
    }
    
    private FishingService GetOrAddFishingService(GameObject serviceObject)
    {
        return serviceObject.GetComponent<FishingService>() ?? 
               serviceObject.AddComponent<FishingService>();
    }
    
    private void SetupInitialState()
    {
        CurrentState = FishingState.Ready;
    }

    private void CreatePlayer()
    {
        currentPlayer = new Player 
        { 
            Id = 1, 
            Name = "–†–∏–±–∞–ª–∫–∞",
            Strength = 10f,
            Experience = 0,
            Equipment = new Equipment
            {
                RodDurability = 100f,
                LineDurability = 100f,
                LineLength = 10f,
                FishingLuck = 1.2f
            }
        };
    }
    
    void OnDestroy()
    {
        // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –≤—ñ–¥ –ø–æ–¥—ñ–π
        if (FishingEventBus.Instance != null)
        {
            FishingEventBus.Instance.OnFishSpawned -= HandleFishSpawned;
        }
    }
}