using UnityEngine;
using System.Collections;

public class BiteController : MonoBehaviour
{
    [SerializeField] private FishingController fishingController;
    [SerializeField] private FloatAnimation floatAnimation;

    [Header("Bite Settings")]
    [SerializeField] private float defaultBiteDuration = 3f;
    [SerializeField] private float defaultBiteSpeed = 1f;
    [SerializeField] private float pullTimeout = 3f;

    private Coroutine biteSequenceCoroutine;
    private Coroutine pullMonitorCoroutine;

    private Fish currentFish;
    private IBiteBehavior currentBiteBehavior;
    
    void Start()
    {
        // –í—ñ–¥–∫–ª–∞–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É, —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –≤—Å–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        StartCoroutine(DelayedSubscription());
    }
    
    private IEnumerator DelayedSubscription()
    {
        // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –≤—Å–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
        yield return new WaitForSeconds(0.5f);
        
        SubscribeToFishingEvents();
        
        Debug.Log("üîß BiteController –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –ø–æ–¥—ñ—ó");
    }
    
    void OnDestroy()
    {
        UnsubscribeFromFishingEvents();
    }
    
    private void SubscribeToFishingEvents()
    {
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ SessionManager
        if (fishingController.sessionManager != null)
        {
            Debug.Log("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—ñ—ó SessionManager");
            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ SessionManager
            fishingController.sessionManager.OnStateChanged += HandleStateChanged;
        }
        
        // –¢–∞–∫–æ–∂ –ø—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ Event Bus –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–±–∏
        FishingEventBus.Instance.OnFishSpawned += HandleFishSpawned;
    }
    
    private void UnsubscribeFromFishingEvents()
    {
        if (fishingController.sessionManager != null)
        {
            fishingController.sessionManager.OnStateChanged -= HandleStateChanged;
        }
        
        if (FishingEventBus.Instance != null)
        {
            FishingEventBus.Instance.OnFishSpawned -= HandleFishSpawned;
        }
    }
    
    private void HandleStateChanged(FishingState state)
    {
        if (state == FishingState.Biting && currentFish != null)
        {
            StartBite(currentFish);
        }
    }
    
    private void HandleFishSpawned(Fish fish)
    {
        currentFish = fish;
        Debug.Log($"üêü BiteController –æ—Ç—Ä–∏–º–∞–≤ —Ä–∏–±—É: {fish.FishType}");
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å
        StartCoroutine(DelayedBiteStart(fish));
    }
    
    private IEnumerator DelayedBiteStart(Fish fish)
    {
        // –ß–µ–∫–∞—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —á–∞—Å –ø–µ—Ä–µ–¥ –∫–ª—é–≤–∞–Ω–Ω—è–º (1-3 —Å–µ–∫—É–Ω–¥–∏)
        float delay = Random.Range(1f, 3f);
        yield return new WaitForSeconds(delay);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –∫–ª—é–≤–∞—Ç–∏
        if (fishingController.IsFloatCast && 
            !fishingController.IsFishBiting && 
            !fishingController.IsHooked)
        {
            StartBite(fish);
        }
    }
    
    public void StartBite(Fish fish)
    {
        if (fish == null) return;
        
        currentFish = fish;
        currentBiteBehavior = fish.GetBiteBehavior();
        
        Debug.Log($"üé£ BiteController: –†–∏–±–∞ {fish.FishType} –ø–æ—á–∞–ª–∞ –∫–ª—é–≤–∞—Ç–∏!");
        
        StopAllCoroutines();
        
        var inputHandler = new BiteInputHandler(fishingController);
        var sequence = new BiteSequence(
            fishingController,
            floatAnimation,
            currentFish,
            inputHandler,
            OnFishHooked,
            OnBiteMissed
        );

        biteSequenceCoroutine = StartCoroutine(sequence.Run(defaultBiteDuration, defaultBiteSpeed));
    }

    private void OnFishHooked()
    {
        Debug.Log("‚úÖ BiteController: –†–∏–±–∞ –ø—ñ–¥—Å—ñ—á–µ–Ω–∞!");
        fishingController.SetHooked(true);
        fishingController.SetFishBiting(false);

        var pullMonitor = new BitePullMonitor(fishingController, pullTimeout, OnFishLost);
        pullMonitorCoroutine = StartCoroutine(pullMonitor.Monitor());
    }

    private void OnBiteMissed()
    {
        Debug.Log("‚ùå BiteController: –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –≤—Å—Ç–∏–≥ –ø—ñ–¥—Å—ñ–∫—Ç–∏");
        fishingController.SetFishBiting(false);
        TryRebite();
    }

    private void OnFishLost()
    {
        Debug.Log("üêü BiteController: –†–∏–±–∞ –≤—Ç—Ä–∞—á–µ–Ω–∞ —á–µ—Ä–µ–∑ –±–µ–∑–¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å");
        fishingController.SetHooked(false);
        TryRebite();
    }

    private void TryRebite()
    {
        StopAllCoroutines();

        var rebiteHandler = new BiteRebiteHandler(
            currentBiteBehavior,
            () => StartBite(currentFish),
            () => {
                Debug.Log("üí® BiteController: –†–∏–±–∞ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ç–µ–∫–ª–∞");
                NotifyFishEscaped();
            }
        );

        StartCoroutine(rebiteHandler.TryRebite());
    }
    
    private void NotifyFishEscaped()
    {
        var session = fishingController.sessionManager.CurrentSession;
        session?.CompleteFishing(FishingResult.MissedBite);
    }
}