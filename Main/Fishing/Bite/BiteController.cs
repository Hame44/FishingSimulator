using UnityEngine;
using System.Collections;

public class BiteController : MonoBehaviour
{
    [SerializeField] private FishingController fishingController;

    [Header("Bite Settings")]
    [SerializeField] private float defaultBiteDuration = 3f;
    [SerializeField] private float defaultBiteSpeed = 1f;
    [SerializeField] private float pullTimeout = 4f; // 3-5 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è

    private Coroutine biteSequenceCoroutine;
    // –í–ò–î–ê–õ–ï–ù–û: pullMonitorCoroutine - –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
    private Coroutine respawnCoroutine;
    private Coroutine pullMonitorCoroutine; // –î–û–î–ê–ù–û: –Ω–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è

    private Fish currentFish;
    private IBiteBehavior currentBiteBehavior;
    
    private FloatAnimation FloatAnimation => fishingController?.floatAnimation;
    
    void Start()
    {
        StartCoroutine(DelayedSubscription());
    }
    
    private IEnumerator DelayedSubscription()
    {
        yield return new WaitForSeconds(0.5f);
        
        if (fishingController == null)
        {
            Debug.LogError("‚ùå BiteController: FishingController –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä—ñ!");
            yield break;
        }
        
        if (FloatAnimation == null)
        {
            Debug.LogError("‚ùå BiteController: FloatAnimation –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤ FishingController!");
            yield break;
        }
        
        SubscribeToFishingEvents();
        Debug.Log("üîß BiteController –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –ø–æ–¥—ñ—ó");
    }
    
    void OnDestroy()
    {
        UnsubscribeFromFishingEvents();
        
        if (respawnCoroutine != null)
        {
            StopCoroutine(respawnCoroutine);
        }
    }
    
    private void SubscribeToFishingEvents()
    {
        if (fishingController.sessionManager != null)
        {
            fishingController.sessionManager.OnStateChanged += HandleStateChanged;
        }
        
        FishingEventBus.Instance.OnFishSpawned += HandleFishSpawned;
    }
    
    private void UnsubscribeFromFishingEvents()
    {
        if (fishingController?.sessionManager != null)
        {
            fishingController.sessionManager.OnStateChanged -= HandleStateChanged;
        }
        
        if (FishingEventBus.Instance != null)
        {
            FishingEventBus.Instance.OnFishSpawned -= HandleFishSpawned;
        }
    }
    
    private void HandleStateChanged(FishingState state)
    {
        if (state == FishingState.Biting && currentFish != null)
        {
            StartBite(currentFish);
        }
    }
    
    private void HandleFishSpawned(Fish fish)
    {
        currentFish = fish;
        Debug.Log($"üêü BiteController –æ—Ç—Ä–∏–º–∞–≤ —Ä–∏–±—É: {fish.FishType}");
        StartCoroutine(DelayedBiteStart(fish));
    }
    
    private IEnumerator DelayedBiteStart(Fish fish)
    {
        float delay = Random.Range(1f, 3f);
        yield return new WaitForSeconds(delay);
        
        if (fishingController.IsFloatCast && 
            !fishingController.IsFishBiting && 
            !fishingController.IsHooked)
        {
            StartBite(fish);
        }
    }
    
    public void StartBite(Fish fish)
    {
        if (fish == null) return;
        
        if (FloatAnimation == null)
        {
            Debug.LogError("‚ùå FloatAnimation –≤—ñ–¥—Å—É—Ç–Ω—ñ–π!");
            return;
        }
        
        currentFish = fish;
        currentBiteBehavior = fish.GetBiteBehavior();
        
        Debug.Log($"üé£ BiteController: –†–∏–±–∞ {fish.FishType} –ø–æ—á–∞–ª–∞ –∫–ª—é–≤–∞—Ç–∏!");
        
        StopAllCoroutines();
        
        // –ó–ú–Ü–ù–ï–ù–û: –í–∏–¥–∞–ª–µ–Ω–æ BiteInputHandler –∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        var sequence = new BiteSequence(
            fishingController,
            FloatAnimation,
            currentFish,
            OnFishHooked,
            OnBiteMissed
        );

        biteSequenceCoroutine = StartCoroutine(sequence.Run(defaultBiteDuration, defaultBiteSpeed));
    }

    private void OnFishHooked()
    {
        Debug.Log("‚úÖ BiteController: –†–∏–±–∞ –ø—ñ–¥—Å—ñ—á–µ–Ω–∞!");
        fishingController.SetHooked(true);
        fishingController.SetFishBiting(false);

            var session = fishingController.sessionManager?.CurrentSession;
        if (session != null)
    {
        // –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–∏–±—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (session.CurrentFish == null && currentFish != null)
        {
            Debug.Log($"üîß –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–∏–±—É –≤ —Å–µ—Å—ñ—ó: {currentFish.FishType}");
            session.SetFish(currentFish);
        }
        
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ setState –∑–∞–º—ñ—Å—Ç—å SetFish –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
        if (session.State != FishingState.Fighting)
        {
            session.setState(FishingState.Fighting);
            Debug.Log("üîß –°—Ç–∞–Ω —Å–µ—Å—ñ—ó –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ Fighting");
        }
        
        Debug.Log($"üîß –°–µ—Å—ñ—è –ø—ñ—Å–ª—è –ø—ñ–¥—Å—ñ–∫–∞–Ω–Ω—è: —Å—Ç–∞–Ω={session.State}, —Ä–∏–±–∞={session.CurrentFish?.FishType}");
    }
    else
    {
        Debug.LogError("‚ùå –°–µ—Å—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –ø—Ä–∏ –ø—ñ–¥—Å—ñ–∫–∞–Ω–Ω—ñ!");
    }

         fishingController.SetCurrentFishDistance(100f); // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è

        // –î–û–î–ê–ù–û: –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è
        pullMonitorCoroutine = StartCoroutine(MonitorPulling());
    }

    private void OnBiteMissed()
    {
        Debug.Log("‚ùå BiteController: –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –≤—Å—Ç–∏–≥ –ø—ñ–¥—Å—ñ–∫—Ç–∏");
        fishingController.SetFishBiting(false);
        TryRebite();
    }

    // –î–û–î–ê–ù–û: –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ü–ö–ú
    private IEnumerator MonitorPulling()
    {
        float idleTimer = 0f;
        
        while (fishingController.IsHooked)
        {
            bool isPulling = Input.GetMouseButton(1); // –ü–ö–ú –∑–∞—Ç–∏—Å–Ω—É—Ç–æ
            
            if (isPulling)
            {
                // –í–∏—Ç—è–≥—É—î–º–æ —Ä–∏–±—É
                idleTimer = 0f;
                fishingController.SetReeling(true);

                fishingController.fishingLogic.PullFish();
                
                // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è (–∑–º–µ–Ω—à–µ–Ω–Ω—è –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó –¥–æ —Ä–∏–±–∏)
                // Debug.Log("üé£ –í–∏—Ç—è–≥—É—î–º–æ —Ä–∏–±—É...");
            }
            else
            {
                // –ü–ö–ú –≤—ñ–¥–ø—É—â–µ–Ω–æ - —Ä–∏–±–∞ –Ω–µ –≤–∏—Ç—è–≥—É—î—Ç—å—Å—è
                fishingController.SetReeling(false);
                idleTimer += Time.deltaTime;
                
                // –Ø–∫—â–æ –Ω–µ –≤–∏—Ç—è–≥—É—î–º–æ –¥–æ–≤—à–µ –Ω—ñ–∂ pullTimeout - —Ä–∏–±–∞ —Å—Ö–æ–¥–∏—Ç—å
                if (idleTimer >= pullTimeout)
                {
                    Debug.Log($"üêü –†–∏–±–∞ —Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –±–µ–∑–¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å ({pullTimeout}—Å)!");
                    OnFishLost();
                    yield break;
                }
            }

            yield return null;
        }
    }

    private void OnFishLost()
    {
        Debug.Log("üêü BiteController: –†–∏–±–∞ –≤—Ç—Ä–∞—á–µ–Ω–∞");
        fishingController.SetHooked(false);
        fishingController.SetReeling(false);
        TryRebite();
    }

    private void TryRebite()
    {
        StopAllCoroutines();

        var rebiteHandler = new BiteRebiteHandler(
            currentBiteBehavior,
            () => StartBite(currentFish),
            OnFishEscapedFinal
        );

        StartCoroutine(rebiteHandler.TryRebite());
    }

    private void OnFishEscapedFinal()
    {
        Debug.Log("üí® BiteController: –†–∏–±–∞ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ç–µ–∫–ª–∞");
        
        NotifyFishEscaped();
        StartFishRespawn();
    }

    private void StartFishRespawn()
    {
        if (!fishingController.IsFloatCast || fishingController.IsReeling)
        {
            Debug.Log("üö´ –ü–æ–ø–ª–∞–≤–æ–∫ –Ω–µ –∑–∞–∫–∏–Ω—É—Ç–∏–π - —Ä–µ—Å–ø–∞–≤–Ω —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
            return;
        }
        
        if (respawnCoroutine != null)
        {
            StopCoroutine(respawnCoroutine);
        }
        
        respawnCoroutine = StartCoroutine(RespawnFishAfterDelay());
    }
    
    private IEnumerator RespawnFishAfterDelay()
    {
        yield return new WaitForSeconds(0.1f);
        
        if (fishingController.IsFloatCast && 
            !fishingController.IsFishBiting && 
            !fishingController.IsHooked && 
            !fishingController.IsReeling)
        {
            Debug.Log("üêü –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–µ—Å–ø–∞–≤–Ω –Ω–æ–≤–æ—ó —Ä–∏–±–∏...");
            RequestNewFishSpawn();
        }
        
        respawnCoroutine = null;
    }
    
    private void RequestNewFishSpawn()
    {
        var fishSpawner = FindObjectOfType<FishSpawner>();
        
        if (fishSpawner != null)
        {
            fishSpawner.ScheduleNextFish(0f);
            Debug.Log("‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –Ω–æ–≤–∏–π —Å–ø–∞–≤–Ω –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ");
        }
        else
        {
            Debug.LogError("‚ùå FishSpawner –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        }
    }
    
    private void NotifyFishEscaped()
    {
        var session = fishingController.sessionManager.CurrentSession;
        session?.CompleteFishing(FishingResult.MissedBite);
    }

    public void StopFishRespawn()
    {
        if (respawnCoroutine != null)
        {
            StopCoroutine(respawnCoroutine);
            respawnCoroutine = null;
            Debug.Log("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ—Å–ø–∞–≤–Ω –∑—É–ø–∏–Ω–µ–Ω–æ");
        }
    }
}