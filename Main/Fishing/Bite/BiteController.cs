using UnityEngine;
using System.Collections;

public class BiteController : MonoBehaviour
{
    [SerializeField] private FishingController fishingController;
    [SerializeField] private FloatAnimation floatAnimation;

    [Header("Bite Settings")]
    [SerializeField] private float defaultBiteDuration = 3f;
    [SerializeField] private float defaultBiteSpeed = 1f;
    [SerializeField] private float pullTimeout = 3f;

    private Coroutine biteSequenceCoroutine;
    private Coroutine pullMonitorCoroutine;

    private Fish currentFish;
    private IBiteBehavior currentBiteBehavior;

    public void StartBite(Fish fish)
    {
        currentFish = fish;
        currentBiteBehavior = fish.GetBiteBehavior();

        StopAllCoroutines();

        var inputHandler = new BiteInputHandler(fishingController);
        var biteSequence = new BiteSequence(
            fishingController,
            floatAnimation,
            currentFish,
            inputHandler,
            OnFishHooked,
            OnBiteMissed
        );

        biteSequenceCoroutine = StartCoroutine(
            biteSequence.Run(defaultBiteDuration, defaultBiteSpeed)
        );
    }

    private void OnFishHooked()
    {
        Debug.Log("‚úÖ –†–∏–±–∞ –ø—ñ–¥—Å—ñ—á–µ–Ω–∞!");
        fishingController.IsHooked = true;
        fishingController.IsBiting = false;

        // –°—Ç–∞—Ä—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: —á–∏ –≥—Ä–∞–≤–µ—Ü—å —Ç—è–≥–Ω–µ —Ä–∏–±—É
        var pullMonitor = new BitePullMonitor(fishingController, pullTimeout, OnFishLost);
        pullMonitorCoroutine = StartCoroutine(pullMonitor.Monitor());
    }

    private void OnBiteMissed()
    {
        Debug.Log("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –≤—Å—Ç–∏–≥ –ø—ñ–¥—Å—ñ–∫—Ç–∏");
        fishingController.IsBiting = false;

        TryRebite();
    }

    private void OnFishLost()
    {
        Debug.Log("üêü –†–∏–±–∞ –≤—Ç—Ä–∞—á–µ–Ω–∞ —á–µ—Ä–µ–∑ –±–µ–∑–¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å");
        fishingController.IsHooked = false;

        TryRebite();
    }

    private void TryRebite()
    {
        StopAllCoroutines();

        var rebiteHandler = new BiteRebiteHandler(
            currentBiteBehavior(),
            () => StartBite(currentFish),
            () => Debug.Log("üí® –†–∏–±–∞ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ç–µ–∫–ª–∞")
        );

        StartCoroutine(rebiteHandler.TryRebite());
    }
}
