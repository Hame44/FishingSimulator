using UnityEngine;
using System.Collections;

public class BiteController : MonoBehaviour
{
    [SerializeField] private FishingController fishingController;
    [SerializeField] private FloatAnimation floatAnimation;

    [Header("Bite Settings")]
    [SerializeField] private float defaultBiteDuration = 3f;
    [SerializeField] private float defaultBiteSpeed = 1f;
    [SerializeField] private float pullTimeout = 3f;

    private Coroutine biteSequenceCoroutine;
    private Coroutine pullMonitorCoroutine;

    private Fish currentFish;
    private IBiteBehavior currentBiteBehavior;
    
    void Start()
    {
        // –í—ñ–¥–∫–ª–∞–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ñ—Ä–µ–π–º—É, —â–æ–± –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≤—Å—Ç–∏–≥–ª–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏—Å—è
        StartCoroutine(DelayedSubscription());
    }
    
    void OnDestroy()
    {
        UnsubscribeFromFishingEvents();
    }
    
    private IEnumerator DelayedSubscription()
    {
        yield return null; // –ß–µ–∫–∞—î–º–æ –æ–¥–∏–Ω —Ñ—Ä–µ–π–º
        SubscribeToFishingEvents();
    }
    
    private void SubscribeToFishingEvents()
    {
        if (fishingController?.sessionManager?.CurrentSession != null)
        {
            var session = fishingController.sessionManager.CurrentSession;
            session.OnFishBite += StartBite;
            Debug.Log("üîî BiteController –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ –ø–æ–¥—ñ—ó");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è BiteController: sessionManager –∞–±–æ CurrentSession –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ");
            // –°–ø—Ä–æ–±—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –ø—ñ–∑–Ω—ñ—à–µ
            StartCoroutine(RetrySubscription());
        }
    }
    
    private IEnumerator RetrySubscription()
    {
        int attempts = 0;
        while (attempts < 10 && (fishingController?.sessionManager?.CurrentSession == null))
        {
            yield return new WaitForSeconds(0.5f);
            attempts++;
        }
        
        if (fishingController?.sessionManager?.CurrentSession != null)
        {
            SubscribeToFishingEvents();
        }
        else
        {
            Debug.LogError("‚ùå BiteController: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø–æ–¥—ñ—ó –ø—ñ—Å–ª—è 10 —Å–ø—Ä–æ–±");
        }
    }
    
    private void UnsubscribeFromFishingEvents()
    {
        var session = fishingController?.sessionManager?.CurrentSession;
        if (session != null)
        {
            session.OnFishBite -= StartBite;
        }
    }
    
    public void StartBite(Fish fish)
    {
        if (fish == null) return;
        
        currentFish = fish;
        currentBiteBehavior = fish.GetBiteBehavior();
        
        Debug.Log($"üé£ BiteController: –†–∏–±–∞ {fish.FishType} –ø–æ—á–∞–ª–∞ –∫–ª—é–≤–∞—Ç–∏!");
        
        StopAllCoroutines();
        
        var inputHandler = new BiteInputHandler(fishingController);
        var sequence = new BiteSequence(
            fishingController,
            floatAnimation,
            currentFish,
            inputHandler,
            OnFishHooked,
            OnBiteMissed
        );

        biteSequenceCoroutine = StartCoroutine(sequence.Run(defaultBiteDuration, defaultBiteSpeed));
    }

    private void OnFishHooked()
    {
        Debug.Log("‚úÖ BiteController: –†–∏–±–∞ –ø—ñ–¥—Å—ñ—á–µ–Ω–∞!");
        fishingController.SetHooked(true);
        fishingController.SetFishBiting(false);

        var pullMonitor = new BitePullMonitor(fishingController, pullTimeout, OnFishLost);
        pullMonitorCoroutine = StartCoroutine(pullMonitor.Monitor());
    }

    private void OnBiteMissed()
    {
        Debug.Log("‚ùå BiteController: –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –≤—Å—Ç–∏–≥ –ø—ñ–¥—Å—ñ–∫—Ç–∏");
        fishingController.SetFishBiting(false);
        TryRebite();
    }

    private void OnFishLost()
    {
        Debug.Log("üêü BiteController: –†–∏–±–∞ –≤—Ç—Ä–∞—á–µ–Ω–∞ —á–µ—Ä–µ–∑ –±–µ–∑–¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å");
        fishingController.SetHooked(false);
        TryRebite();
    }

    private void TryRebite()
    {
        StopAllCoroutines();

        if (currentBiteBehavior != null)
        {
            var rebiteHandler = new BiteRebiteHandler(
                currentBiteBehavior,
                () => StartBite(currentFish),
                () => {
                    Debug.Log("üí® BiteController: –†–∏–±–∞ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ç–µ–∫–ª–∞");
                    NotifyFishEscaped();
                }
            );

            StartCoroutine(rebiteHandler.TryRebite());
        }
        else
        {
            NotifyFishEscaped();
        }
    }
    
    private void NotifyFishEscaped()
    {
        var session = fishingController?.sessionManager?.CurrentSession;
        session?.CompleteFishing(FishingResult.MissedBite);
    }
}