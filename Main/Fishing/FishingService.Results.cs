using UnityEngine;
using System.Collections;

public partial class FishingService
{

    private void OnFishingComplete(FishingResult result, Fish fish)
    {
        Debug.Log($"üèÅ –†–∏–±–æ–ª–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}");
        
        switch (result)
        {
            case FishingResult.Success:
                HandleSuccessfulCatch(fish);
                break;
            case FishingResult.FishEscaped:
            case FishingResult.LineBroken:
            case FishingResult.RodBroken:
            case FishingResult.RodPulledAway:
                HandleFailedCatch(result, fish);
                break;
            case FishingResult.MissedBite:
                HandleMissedBite(fish);
                break;
        }
        
        // –°–∫–∏–¥–∞—î–º–æ —Å–µ—Å—ñ—é —Ç–∞ –ø–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É —Ä–∏–±—É
        StartCoroutine(ResetSessionAfterDelay(3f));
    }
    
    private void HandleSuccessfulCatch(Fish fish)
    {
        var caughtFish = new CaughtFishData
        {
            PlayerId = currentPlayer.Id,
            FishType = fish.FishType,
            Weight = fish.Weight,
            CaughtAt = System.DateTime.Now
        };
        
        fishRepository.SaveCaughtFish(caughtFish);
        
        // –ù–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —É–ª–æ–≤
        float strengthGain = fish.Weight * 0.1f;
        int expGain = Mathf.RoundToInt(fish.Weight * 15);
        
        currentPlayer.GainStrength(strengthGain);
        currentPlayer.GainExperience(expGain);
        
        playerRepository.UpdatePlayerStats(currentPlayer.Id, strengthGain, expGain);
        
        Debug.Log($"üèÜ –£–°–ü–Ü–•! –ü—ñ–π–º–∞–Ω–æ {fish.FishType} –≤–∞–≥–æ—é {fish.Weight:F2}–∫–≥!");
        Debug.Log($"üìà –ù–∞–≥–æ—Ä–æ–¥–∏: +{strengthGain:F1} —Å–∏–ª–∏, +{expGain} –¥–æ—Å–≤—ñ–¥—É");
        
        // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —É–ª–æ–≤—É - —Å–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ä–∏–±–∏
        ScheduleNextFishAfterSuccess();
    }
    
    private void HandleFailedCatch(FishingResult result, Fish fish)
    {
        string message = result switch
        {
            FishingResult.FishEscaped => "üèÉ –†–∏–±–∞ –≤—Ç–µ–∫–ª–∞",
            FishingResult.LineBroken => "üíî –ü–æ—Ä–≤–∞–ª–∞—Å—å –ª–µ—Å–∫–∞",
            FishingResult.RodBroken => "üí• –ó–ª–∞–º–∞–ª–∞—Å—å –≤—É–¥–∫–∞", 
            FishingResult.RodPulledAway => "üí™ –†–∏–±–∞ –≤–∏—Ä–≤–∞–ª–∞ –≤—É–¥–∫—É",
            _ => "‚ùå –ù–µ–≤–¥–∞—á–∞"
        };
        
        if (fish != null)
        {
            Debug.Log($"{message} - {fish.FishType} ({fish.Weight:F2}–∫–≥, —Å–∏–ª–∞: {fish.Strength:F1})");
        }
        
        // –ü—ñ—Å–ª—è –Ω–µ–≤–¥–∞—á—ñ - –¥–æ–≤–≥–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        ScheduleNextFishAfterLongDelay();
    }
    
    private void HandleMissedBite(Fish fish)
    {
        Debug.Log($"‚è∞ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–∫–ª—é–≤–∫–∞ - {fish?.FishType}");
        
        // –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–∫–ª—é–≤–∫–∞ = –¥—É–∂–µ –¥–æ–≤–≥–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª (–≥—Ä–∞–≤–µ—Ü—å –±—É–≤ –Ω–µ—É–≤–∞–∂–Ω–∏–π)
        ScheduleNextFishAfterLongDelay();
    }
    
    private void ScheduleNextFishAfterSuccess()
    {
        float successDelay = UnityEngine.Random.Range(8f, 15f);
        Debug.Log($"üéâ –ù–∞—Å—Ç—É–ø–Ω–∞ —Ä–∏–±–∞ –ø—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É —á–µ—Ä–µ–∑ {successDelay:F1}—Å–µ–∫");
        fishSpawnCoroutine = StartCoroutine(DelayNextFish(successDelay));
    }
    
    private IEnumerator ResetSessionAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);
        
        if (currentSession != null)
        {
            currentSession.ResetToWaiting();
        }
    }
    
}