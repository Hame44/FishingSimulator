using UnityEngine;
using System.Collections;

public class FloatAnimation
{
    private FishingController controller;
    private Vector3 floatStartPosition;
    private Vector3 floatTargetPosition;
    private Vector3 floatBasePosition;
    
    // –î–û–î–ê–ù–û: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Collider2D –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–µ–∂
    private PolygonCollider2D waterCollider;
    
    public FloatAnimation(FishingController controller)
    {
        this.controller = controller;
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤–æ–¥–Ω–∏–π –∫–æ–ª–∞–π–¥–µ—Ä
        waterCollider = GameObject.FindObjectOfType<PolygonCollider2D>();
    }
    
    public void InitializeVisuals()
    {
        SetupFloatStartPosition();
        HideFloat();
    }
    
    public void SetupFloatStartPosition()
    {
        if (controller.floatObject != null)
        {
            floatStartPosition = controller.shore != null ? 
            controller.shore.position : controller.transform.position;
            controller.floatObject.transform.position = floatStartPosition;
        }
    }
    
    public void HideFloat()
    {
        if (controller.floatObject != null)
        {
            controller.floatObject.SetActive(false);
        }
    }
    
    public void ShowFloat()
    {
        controller.floatObject.SetActive(true);
        controller.SetFloatCast(true);
    }

    public IEnumerator ReturnToShore()
{
    if (controller.floatObject == null || controller.shore == null) yield break;
    
    Vector3 startPos = controller.floatObject.transform.position;
    Vector3 endPos = controller.shore.position;
    
    float returnTime = 2f;
    float elapsed = 0f;
    
    Debug.Log("üîÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–ø–ª–∞–≤–æ–∫ –¥–æ –±–µ—Ä–µ–≥–∞...");
    
    while (elapsed < returnTime)
    {
        elapsed += Time.deltaTime;
        float progress = elapsed / returnTime;
        
        Vector3 currentPos = Vector3.Lerp(startPos, endPos, progress);
        controller.floatObject.transform.position = currentPos;
        
        yield return null;
    }
    
    // –•–æ–≤–∞—î–º–æ –ø–æ–ø–ª–∞–≤–æ–∫ –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    HideFloat();
    Debug.Log("‚úÖ –ü–æ–ø–ª–∞–≤–æ–∫ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –¥–æ –±–µ—Ä–µ–≥–∞");
}


    // –î–û–î–ê–ù–û: –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–ø–ª–∞–≤–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
    public void ShowFloatAtPosition(Vector3 position)
    {
        if (controller.floatObject != null)
        {
            controller.floatObject.transform.position = position;
            floatBasePosition = position; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
            controller.floatObject.SetActive(true);
            controller.SetFloatCast(true);
            
            Debug.Log($"üéØ –ü–æ–ø–ª–∞–≤–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–∑–∏—Ü—ñ—ó: {position}");
        }
    }

    public IEnumerator BiteBobbing(float biteSpeed, float biteDuration)
    {
        Debug.Log($"üé£ BiteBobbing –ø–æ—á–∞–≤—Å—è: —à–≤–∏–¥–∫—ñ—Å—Ç—å {biteSpeed}, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å {biteDuration:F1}—Å");
        
        if (controller.floatObject == null)
        {
            Debug.LogError("‚ùå FloatObject –≤—ñ–¥—Å—É—Ç–Ω—ñ–π!");
            yield break;
        }
        
        yield return controller.StartCoroutine(BiteAnimation(biteSpeed, biteDuration));
        
        Debug.Log("‚úÖ BiteBobbing –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }

    public void StartBobbing(float speed, float duration)
    {
        if (controller != null)
        {
            controller.StartCoroutine(BiteBobbing(speed, duration));
        }
    }
    
    public IEnumerator BaseBobbing()
    {
        Debug.Log("üåä BaseBobbing –ø–æ—á–∞–≤—Å—è");
        
        while (controller.IsFloatCast && 
               controller.floatObject != null && 
               !controller.IsReeling &&
               !controller.IsFishBiting)
        {
            float time = Time.time * controller.floatBobSpeed;
            float bobOffset = -Mathf.Abs(Mathf.Sin(time)) * controller.floatBobIntensity * 0.3f;
        
            Vector3 newPos = floatBasePosition;
            newPos.y += bobOffset;
            controller.floatObject.transform.position = newPos;

            yield return controller.ShortDelay;
        }
        
        Debug.Log("üõë BaseBobbing –∑—É–ø–∏–Ω–µ–Ω–æ");
    }

    // –ü–ï–†–ï–†–û–ë–ê–ù–û: BiteAnimation –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Collider2D
    public IEnumerator BiteAnimation(float biteSpeed, float biteDuration)
    {
        if (controller.floatObject == null) yield break;
        
        float elapsed = 0f;
        Vector3 startBitePosition = controller.floatObject.transform.position;
        
        // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É
        Vector2 moveDirection = new Vector2(
            UnityEngine.Random.Range(-1f, 1f),
            UnityEngine.Random.Range(-1f, 1f)
        ).normalized;
        
        float moveSpeed = biteSpeed * 0.3f;
        
        Debug.Log($"üé£ BiteAnimation: –Ω–∞–ø—Ä—è–º–æ–∫ {moveDirection}");

        Vector3 currentPosition = startBitePosition;

        while (elapsed < biteDuration && 
               controller.IsFishBiting && 
               !controller.IsHooked &&
               controller.floatObject != null)
        {
            elapsed += Time.deltaTime;
            
            // –†—É—Ö–∞—î–º–æ—Å—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
            Vector2 moveOffset = moveDirection * moveSpeed * Time.deltaTime;
            Vector3 newPos = currentPosition;
            newPos.x += moveOffset.x;
            newPos.y += moveOffset.y;
            
            // –ó–ú–Ü–ù–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Collider2D –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–µ–∂
            if (!IsPositionInWater(newPos))
            {
                Debug.Log($"üîÑ –ü–æ–ø–ª–∞–≤–æ–∫ –¥–æ—Å—è–≥ –º–µ–∂—ñ –≤–æ–¥–∏! –ü–æ–∑–∏—Ü—ñ—è: {newPos}");
                
                // –í—ñ–¥–±–∏–≤–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫
                moveDirection = -moveDirection;
                
                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–∞–ª—ñ–¥–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
                newPos = currentPosition;
            }

            controller.floatObject.transform.position = newPos;
            currentPosition = newPos;

            yield return null;
        }
        
        floatBasePosition = currentPosition;
        Debug.Log($"‚úÖ BiteAnimation –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }

    // –î–û–î–ê–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –≤–æ–¥–∏
    private bool IsPositionInWater(Vector3 position)
    {
        if (waterCollider == null) return true; // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–ª–∞–π–¥–µ—Ä–∞, –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ä—É—Ö
        
        return waterCollider.OverlapPoint(position);
    }

    // –í–ò–î–ê–õ–ï–ù–û: –°—Ç–∞—Ä—ñ –º–µ—Ç–æ–¥–∏ CastAnimation, CalculateCastTarget, AnimateCastArc, SetFloatAtTarget
    // –¢–µ–ø–µ—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ, –±–æ –ø–æ–ø–ª–∞–≤–æ–∫ –æ–¥—Ä–∞–∑—É –∑'—è–≤–ª—è—î—Ç—å—Å—è –≤ —Ü—ñ–ª—å–æ–≤—ñ–π –ø–æ–∑–∏—Ü—ñ—ó

    public Vector3 FloatStartPosition => floatStartPosition;
    public Vector3 FloatTargetPosition => floatTargetPosition;
    public Vector3 FloatBasePosition => floatBasePosition;
}