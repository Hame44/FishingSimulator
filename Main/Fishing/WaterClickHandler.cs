using UnityEngine;

public class WaterClickHandler : MonoBehaviour
{
    [Header("Water Settings")]
    public PolygonCollider2D waterCollider;
    public float floatRadius = 3f; // –†–∞–¥—ñ—É—Å –ø–æ–ø–ª–∞–≤–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–µ–∂
    
    private FishingController fishingController;
    private Camera mainCamera;

    void Start()
    {
        fishingController = FindObjectOfType<FishingController>();
        mainCamera = Camera.main;
        
        if (waterCollider == null)
        {
            waterCollider = GetComponent<PolygonCollider2D>();
        }
    }

    void Update()
    {
        if (Input.GetMouseButtonDown(0)) // –õ–ö–ú
        {
            HandleWaterClick();
        }
    }

    private void HandleWaterClick()
    {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–ø–ª–∞–≤–æ–∫ –Ω–µ –∑–∞–∫–∏–Ω—É—Ç–∏–π
        if (fishingController.IsFloatCast) return;

        Vector3 mouseWorldPos = mainCamera.ScreenToWorldPoint(Input.mousePosition);
        mouseWorldPos.z = 0f; // 2D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ–∫ –ø–æ –≤–æ–¥—ñ
        if (IsPointInWater(mouseWorldPos))
        {
            Vector3 validPosition = GetValidFloatPosition(mouseWorldPos);
            fishingController.CastToPosition(validPosition);
        }
    }

    private bool IsPointInWater(Vector3 point)
    {
        return waterCollider.OverlapPoint(point);
    }

    private Vector3 GetValidFloatPosition(Vector3 clickPosition)
    {
        // –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–∂—ñ –≤–æ–¥–∏
        Bounds waterBounds = waterCollider.bounds;
        
        // –û–±–º–µ–∂—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–∞–¥—ñ—É—Å–∞ –ø–æ–ø–ª–∞–≤–∫–∞
        float minX = waterBounds.min.x + floatRadius;
        float maxX = waterBounds.max.x - floatRadius;
        float minY = waterBounds.min.y + floatRadius;
        float maxY = waterBounds.max.y - floatRadius;

        Vector3 validPosition = new Vector3(
            Mathf.Clamp(clickPosition.x, minX, maxX),
            Mathf.Clamp(clickPosition.y, minY, maxY),
            0f
        );

        Debug.Log($"üéØ –ó–∞–∫–∏–¥–∞–Ω–Ω—è –≤ –ø–æ–∑–∏—Ü—ñ—é: {validPosition}");
        return validPosition;
    }
}