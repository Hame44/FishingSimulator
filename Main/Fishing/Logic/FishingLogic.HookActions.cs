using UnityEngine;
using System.Collections;

public partial class FishingLogic
{
    
    private void HandleHookAction(FishingSession session)
    {
        switch (session.State)
        {
            case FishingState.Waiting:
                HandlePrematureHook();
                break;
                
            case FishingState.Biting:
                if (controller.IsFishBiting)
                {
                    HandleSuccessfulHook(session);
                }
                break;
                
            case FishingState.Hooked:
                StartFighting(session);
                break;
                
            case FishingState.Fighting:
                // –ü—ñ–¥ —á–∞—Å –±–æ—Ä–æ—Ç—å–±–∏ Hook –æ–∑–Ω–∞—á–∞—î –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ —Ç—è–≥–Ω–µ–Ω–Ω—è
                PullFish();
                break;
                
            default:
                Debug.LogWarning($"‚ùå Hook –Ω–µ–º–æ–∂–ª–∏–≤–∏–π –≤ —Å—Ç–∞–Ω—ñ {session.State}");
                break;
        }
    }
    
    private void HandlePrematureHook()
    {
        controller.StartCoroutine(ShowTemporaryMessage("–ü–µ—Ä–µ–¥—á–∞—Å–Ω–æ! –ß–µ–∫–∞–π—Ç–µ –ø–æ–∫–ª—é–≤–∫–∏...", 2f));
        Debug.Log("‚è∞ –ü–µ—Ä–µ–¥—á–∞—Å–Ω–µ –ø—ñ–¥—Å—ñ–∫–∞–Ω–Ω—è!");
    }
    
    private void HandleSuccessfulHook(FishingSession session)
    {
        if (session.TryHook())
        {
            controller.SetHooked(true);
            controller.SetFishBiting(false);
            controller.VisualEffects.PlayHookEffect();
            controller.UIManager.UpdateStatusText("hooked");
            controller.UIManager.UpdateButtonStates();
            
            Debug.Log("ü™ù –†–∏–±–∞ –ø—ñ–¥—Å—ñ—á–µ–Ω–∞!");
        }
        else
        {
            Debug.Log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Å—ñ–∫—Ç–∏ —Ä–∏–±—É");
        }
    }
    
    private void StartFighting(FishingSession session)
    {
        session.StartFight();
        InitializeFightSequence();
        
        Debug.Log("‚öîÔ∏è –ü–æ—á–∞–ª–∞—Å—è –±–æ—Ä–æ—Ç—å–±–∞ –∑ —Ä–∏–±–æ—é!");
    }
    
    private void InitializeFightSequence()
    {
        controller.SetCurrentFishDistance(controller.castDistance);
        controller.SetReeling(true);
        controller.SetFightTimer(0f);
        controller.SetTensionLevel(0f);
        
        controller.UIManager.ShowProgressBar();
        controller.UIManager.UpdateStatusText("fighting");
        
        var fightCoroutine = controller.StartCoroutine(FightSequenceCoroutine());
        controller.SetFightCoroutine(fightCoroutine);
    }
    
    private IEnumerator ShowTemporaryMessage(string message, float duration)
    {
        controller.UIManager.UpdateStatusText(message);
        yield return new WaitForSeconds(duration);
        controller.UIManager.UpdateStatusText("waiting");
    }
    
}