using UnityEngine;
using System.Collections;

public partial class FishingService
{
    private void StartFishSpawnLogic()
    {
        if (fishSpawnCoroutine != null)
        {
            StopCoroutine(fishSpawnCoroutine);
        }
        
        fishSpawnCoroutine = StartCoroutine(SpawnFishWithDelay());
    }
    
    private IEnumerator SpawnFishWithDelay()
    {
        // –î–æ–≤–≥–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ—è–≤–æ—é —Ä–∏–±–∏ (5-25 —Å–µ–∫—É–Ω–¥)
        float spawnDelay = UnityEngine.Random.Range(5f, 25f);
        Debug.Log($"üïê –ß–µ–∫–∞—î–º–æ –ø–æ—è–≤—É —Ä–∏–±–∏ {spawnDelay:F1} —Å–µ–∫—É–Ω–¥...");
        
        yield return new WaitForSeconds(spawnDelay);
        
        if (currentSession?.State == FishingState.Waiting)
        {
            SpawnNewFish();
        }
        
        fishSpawnCoroutine = null;
    }
    
    private void SpawnNewFish()
    {
        // –í–∏–±–∏—Ä–∞—î–º–æ —Ç–∏–ø —Ä–∏–±–∏
        string fishType = SelectRandomFishType();
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–∏–±—É —á–µ—Ä–µ–∑ Factory
        var fishFactory = GetFishFactory(fishType);
        if (fishFactory == null)
        {
            Debug.LogError($"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Factory –¥–ª—è {fishType}");
            return;
        }
        
        Fish newFish = fishFactory.CreateFish();
        currentSession.SetFish(newFish);
        
        Debug.Log($"üêü –ù–æ–≤–∞ —Ä–∏–±–∞ –∑'—è–≤–∏–ª–∞—Å—å: {newFish.FishType} (–≤–∞–≥–∞: {newFish.Weight:F1}–∫–≥, —Å–∏–ª–∞: {newFish.Strength:F1})");
        
        // –ù–ï –∑–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª—é–≤–∞–Ω–Ω—è —Ç—É—Ç - —Ü–µ —Ä–æ–±–∏—Ç—å BiteController!
        // BiteController —Å–∞–º –ø—ñ–¥–ø–∏—à–µ—Ç—å—Å—è –Ω–∞ OnFishBite event
    }
    
    private string SelectRandomFishType()
    {
        float chance = UnityEngine.Random.value;
        return chance < 0.7f ? "Carp" : "Perch";
    }
    
    private FishFactory GetFishFactory(string fishType)
    {
        // –¶–µ –º–∞—î –±—É—Ç–∏ —ñ–Ω'—î–∫—Ü—ñ—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π, –∞–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏:
        return fishType switch
        {
            "Carp" => new CarpFactory(),
            "Perch" => new PerchFactory(),
            _ => null
        };
    }
    
    public void ScheduleNextFishAfterLongDelay()
    {
        if (fishSpawnCoroutine != null)
        {
            StopCoroutine(fishSpawnCoroutine);
        }
        
        float longDelay = UnityEngine.Random.Range(20f, 45f);
        Debug.log($"‚è∞ –ù–∞—Å—Ç—É–ø–Ω–∞ —Ä–∏–±–∞ —á–µ—Ä–µ–∑ {longDelay:F1} —Å–µ–∫—É–Ω–¥ (–¥–æ–≤–≥–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª)");
        
        fishSpawnCoroutine = StartCoroutine(DelayNextFish(longDelay));
    }
    
    private IEnumerator DelayNextFish(float delay)
    {
        yield return new WaitForSeconds(delay);
        
        if (currentSession?.State == FishingState.Waiting)
        {
            StartFishSpawnLogic();
        }
        
        fishSpawnCoroutine = null;
    }
    
}